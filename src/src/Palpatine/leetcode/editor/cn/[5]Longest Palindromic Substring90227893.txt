class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() <= 0) {
            return "";
        }
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        int maxLength = 0;
        String maxString = "";
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    int length = 0;
                    if (i + 1 == j) {
                        dp[i][j] = true;
                        length = 2;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1];
                        if (dp[i][j]) {
                            length = j - i + 1;
                        }
                    }
                    if (length >= maxLength) {
                        maxString = s.substring(i, i + length);
                        maxLength = length;
                    }
                }
            }
        }
        return maxString;
    }
}

//total_testcases:103
//total_correct:99
//input_formatted:"a"
//expected_output:"a"
//code_output:""
