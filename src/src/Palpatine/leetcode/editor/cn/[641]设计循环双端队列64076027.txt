class MyCircularDeque {

    Node head = null;
    int maxSize = 0;
    int currentSize = 0;
    Node last = null;

    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        maxSize = k;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        // 检查size
        if (maxSize < currentSize + 1) {
            return false;
        }
        currentSize++;
        if (currentSize == 1) {
            Node tmp = new Node(value);
            head = last = tmp;
            return true;
        }

        Node tmp = new Node(value, null, head);
        head.prev = tmp;
        tmp.next = head;
        head = tmp;
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        // 检查size
        if (maxSize < currentSize + 1) {
            return false;
        }
        currentSize++;
        if (currentSize == 1) {
            Node tmp = new Node(value);
            head = last = tmp;
            return true;
        }

        Node tmp = new Node(value, last, null);
        last.next = tmp;
        tmp.prev = last;
        last = tmp;
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if (currentSize < 1 || head == null) {
            return false;
        }
        currentSize--;
        head = head.next;
        head.prev = null;
        return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if (currentSize < 1 || last == null) {
            return false;
        }
        currentSize--;
        last = last.prev;
        last.next = null;
        return true;
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
        return head.val;
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        return last.val;
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        return currentSize == 0;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        return currentSize == maxSize;
    }

    private class Node {
        int  val;
        Node next;
        Node prev;

        Node(int val) {
            this(val, null, null);
        }

        Node(int val, Node prev) {
            this(val, prev, null);
        }

        Node(int val, Node prev, Node next) {
            this.val = val;
            this.next = next;
            this.prev = prev;
        }
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */

//runtime_error:
    //last_testcase:["MyCircularDeque","insertFront","getFront","isEmpty","deleteFront","insertLast","getRear","insertLast","insertFront","deleteLast","insertLast","isEmpty"] [[8],[5],[],[],[],[3],[],[7],[7],[],[4],[]]
