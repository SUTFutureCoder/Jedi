class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);
        Set<String> begin = new HashSet<>();
        Set<String> end = new HashSet<>();
        begin.add(beginWord);
        end.add(endWord);

        int distance = 1;
        while (!begin.isEmpty() && !end.isEmpty()) {
            if (begin.size() > end.size()) {
                Set<String> tmp = begin;
                begin = end;
                end = tmp;
            }

            Set<String> addSet = new HashSet<>();
            for (String s : begin) {
                char[] chars = s.toCharArray();
                for (int i = 0; i < chars.length; i++) {
                    char old = chars[i];
                    for (char c = 'a'; c <= 'z'; c++) {
                        chars[i] = c;
                        String newStr = new String(chars);
                        if (end.contains(newStr)) {
                            return distance + 1;
                        }
                        if (dict.contains(newStr)) {
                            addSet.add(newStr);
                            dict.remove(newStr);
                        }
                    }
                    chars[i] = old;
                }
            }

            begin = addSet;
            distance++;
        }
        return 0;
    }
}

//total_testcases:43
//total_correct:41
//input_formatted:"hit", "cog", ["hot","dot","dog","lot","log"]
//expected_output:0
//code_output:5
